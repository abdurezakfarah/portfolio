/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: 'sanity.imagePaletteSwatch';
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: 'sanity.imagePalette';
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: 'sanity.imageDimensions';
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: 'sanity.fileAsset';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: 'geopoint';
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Testimonials = {
  _type: 'testimonials';
  heading: Heading;
  testimonials: Array<{
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: 'testimonial';
  }>;
};

export type ProjectBlock = {
  _type: 'projectBlock';
  heading: Heading;
  projects: Array<{
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: 'project';
  }>;
};

export type Skills = {
  _type: 'skills';
  heading: Heading;
  skills: Array<
    {
      _key: string;
    } & Stack
  >;
};

export type Experience = {
  _type: 'experience';
  heading: Heading;
  experience: Array<{
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: 'portfolio.experience';
  }>;
};

export type TextSection = {
  _type: 'textSection';
  heading: Heading;
  richtext: Array<
    | {
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: 'span';
          _key: string;
        }>;
        style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote';
        listItem?: 'bullet' | 'number';
        markDefs?: Array<{
          href?: string;
          _type: 'link';
          _key: string;
        }>;
        level?: number;
        _type: 'block';
        _key: string;
      }
    | {
        asset?: {
          _ref: string;
          _type: 'reference';
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: 'image';
        _key: string;
      }
    | ({
        _key: string;
      } & Callout)
    | ({
        _key: string;
      } & CustomCode)
  >;
};

export type Hero = {
  _type: 'hero';
  eyebrow: string;
  title: string;
  subtitle: string;
};

export type RichtextBlock = {
  _type: 'richtextBlock';
  richtext?: Array<
    | {
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: 'span';
          _key: string;
        }>;
        style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote';
        listItem?: 'bullet' | 'number';
        markDefs?: Array<{
          href?: string;
          _type: 'link';
          _key: string;
        }>;
        level?: number;
        _type: 'block';
        _key: string;
      }
    | {
        asset?: {
          _ref: string;
          _type: 'reference';
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
        };
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: 'image';
        _key: string;
      }
    | ({
        _key: string;
      } & Callout)
    | ({
        _key: string;
      } & CustomCode)
  >;
};

export type Heading = {
  _type: 'heading';
  eyebrow?: string;
  title: string;
  subtitle?: string;
};

export type CustomCode = {
  _type: 'customCode';
  code?: Code;
  showCopy: boolean;
};

export type Callout = {
  _type: 'callout';
  theme: 'default' | 'primary' | 'positive' | 'caution' | 'critical';
  title?: string;
  text: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: 'span';
      _key: string;
    }>;
    style?: 'normal';
    listItem?: 'bullet' | 'number';
    markDefs?: Array<{
      href?: string;
      _type: 'link';
      _key: string;
    }>;
    level?: number;
    _type: 'block';
    _key: string;
  }>;
};

export type Stack = {
  _type: 'stack';
  title?: string;
  technologies?: Array<{
    name: string;
    icon: {
      asset?: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: 'image';
    };
    _key: string;
  }>;
};

export type Content = Array<
  | ({
      _key: string;
    } & Heading)
  | ({
      _key: string;
    } & TextSection)
  | ({
      _key: string;
    } & RichtextBlock)
  | ({
      _key: string;
    } & Hero)
  | ({
      _key: string;
    } & Experience)
  | ({
      _key: string;
    } & Skills)
  | ({
      _key: string;
    } & ProjectBlock)
  | ({
      _key: string;
    } & Testimonials)
>;

export type Richtext = Array<
  | {
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: 'span';
        _key: string;
      }>;
      style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote';
      listItem?: 'bullet' | 'number';
      markDefs?: Array<{
        href?: string;
        _type: 'link';
        _key: string;
      }>;
      level?: number;
      _type: 'block';
      _key: string;
    }
  | {
      asset?: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: 'image';
      _key: string;
    }
  | ({
      _key: string;
    } & Callout)
  | ({
      _key: string;
    } & CustomCode)
>;

export type Tag = {
  _id: string;
  _type: 'tag';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name: string;
  slug: Slug;
};

export type Post = {
  _id: string;
  _type: 'post';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  slug: Slug;
  excerpt: string;
  keywords?: string;
  ogImage?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  };
  showOg?: boolean;
  tags: Array<{
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: 'tag';
  }>;
  author: {
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: 'author';
  };
  publishedAt: string;
  body: Richtext;
};

export type Author = {
  _id: string;
  _type: 'author';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name: string;
  slug: Slug;
  image: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  };
  twitter: string;
};

export type Testimonial = {
  _id: string;
  _type: 'testimonial';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name: string;
  designation: string;
  company: string;
  image: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  };
  text: string;
};

export type Project = {
  _id: string;
  _type: 'project';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  description: string;
  tech: Array<string>;
  image: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  };
  source?: string;
  preview: string;
};

export type PortfolioExperience = {
  _id: string;
  _type: 'portfolio.experience';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  company: string;
  icon?: CustomIcon;
  date: string;
  duties: Array<string>;
};

export type CustomIcon = {
  _type: 'customIcon';
  foreground?: SimplerColor;
  background?: SimplerColor;
  icon: Icon;
};

export type Page = {
  _id: string;
  _type: 'page';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  isHomePage: boolean;
  title: string;
  slug?: Slug;
  description?: string;
  content: Content;
};

export type SanityImageCrop = {
  _type: 'sanity.imageCrop';
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: 'sanity.imageHotspot';
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: 'sanity.imageAsset';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: 'sanity.assetSourceData';
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: 'sanity.imageMetadata';
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Code = {
  _type: 'code';
  language?: string;
  filename?: string;
  code?: string;
  highlightedLines?: Array<number>;
};

export type Icon = {
  _type: 'icon';
  name?: string;
};

export type MediaTag = {
  _id: string;
  _type: 'media.tag';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: Slug;
};

export type Slug = {
  _type: 'slug';
  current: string;
  source?: string;
};

export type HighlightColor = {
  _type: 'highlightColor';
  label?: string;
  value?: string;
};

export type TextColor = {
  _type: 'textColor';
  label?: string;
  value?: string;
};

export type SimplerColor = {
  _type: 'simplerColor';
  label?: string;
  value?: string;
};

export type AllSanitySchemaTypes =
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | SanityFileAsset
  | Geopoint
  | Testimonials
  | ProjectBlock
  | Skills
  | Experience
  | TextSection
  | Hero
  | RichtextBlock
  | Heading
  | CustomCode
  | Callout
  | Stack
  | Content
  | Richtext
  | Tag
  | Post
  | Author
  | Testimonial
  | Project
  | PortfolioExperience
  | CustomIcon
  | Page
  | SanityImageCrop
  | SanityImageHotspot
  | SanityImageAsset
  | SanityAssetSourceData
  | SanityImageMetadata
  | Code
  | Icon
  | MediaTag
  | Slug
  | HighlightColor
  | TextColor
  | SimplerColor;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./src/sanity/lib/queries.ts
// Variable: pageQuery
// Query: *[_type == "page" && slug.current == $slug][0]{   ...,   content[] {      ...,     _type == "experience" => {      ...,      experience[]->     },     _type == "skills" => {      ...,      skills[] {        ...,        technologies[]{          ...,          "icon": icon.asset->url        }      }     },     _type == "projectBlock" => {        ...,        projects[]->{          ...,          image {            ...,            asset->          }        }     },     _type == "testimonials" => {        ...,        testimonials[]-> {          ...,          image {            ...,            asset->          }        }     }   } }
export type PageQueryResult = {
  _id: string;
  _type: 'page';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  isHomePage: boolean;
  title: string;
  slug?: Slug;
  description?: string;
  content: Array<
    | {
        _key: string;
        _type: 'experience';
        heading: Heading;
        experience: Array<{
          _id: string;
          _type: 'portfolio.experience';
          _createdAt: string;
          _updatedAt: string;
          _rev: string;
          title: string;
          company: string;
          icon?: CustomIcon;
          date: string;
          duties: Array<string>;
        }>;
      }
    | {
        _key: string;
        _type: 'heading';
        eyebrow?: string;
        title: string;
        subtitle?: string;
      }
    | {
        _key: string;
        _type: 'hero';
        eyebrow: string;
        title: string;
        subtitle: string;
      }
    | {
        _key: string;
        _type: 'projectBlock';
        heading: Heading;
        projects: Array<{
          _id: string;
          _type: 'project';
          _createdAt: string;
          _updatedAt: string;
          _rev: string;
          title: string;
          description: string;
          tech: Array<string>;
          image: {
            asset: {
              _id: string;
              _type: 'sanity.imageAsset';
              _createdAt: string;
              _updatedAt: string;
              _rev: string;
              originalFilename?: string;
              label?: string;
              title?: string;
              description?: string;
              altText?: string;
              sha1hash?: string;
              extension?: string;
              mimeType?: string;
              size?: number;
              assetId?: string;
              uploadId?: string;
              path?: string;
              url?: string;
              metadata?: SanityImageMetadata;
              source?: SanityAssetSourceData;
            } | null;
            hotspot?: SanityImageHotspot;
            crop?: SanityImageCrop;
            _type: 'image';
          };
          source?: string;
          preview: string;
        }>;
      }
    | {
        _key: string;
        _type: 'richtextBlock';
        richtext?: Array<
          | ({
              _key: string;
            } & Callout)
          | ({
              _key: string;
            } & CustomCode)
          | {
              children?: Array<{
                marks?: Array<string>;
                text?: string;
                _type: 'span';
                _key: string;
              }>;
              style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'normal';
              listItem?: 'bullet' | 'number';
              markDefs?: Array<{
                href?: string;
                _type: 'link';
                _key: string;
              }>;
              level?: number;
              _type: 'block';
              _key: string;
            }
          | {
              asset?: {
                _ref: string;
                _type: 'reference';
                _weak?: boolean;
                [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
              };
              hotspot?: SanityImageHotspot;
              crop?: SanityImageCrop;
              _type: 'image';
              _key: string;
            }
        >;
      }
    | {
        _key: string;
        _type: 'skills';
        heading: Heading;
        skills: Array<{
          _key: string;
          _type: 'stack';
          title?: string;
          technologies: Array<{
            name: string;
            icon: string | null;
            _key: string;
          }> | null;
        }>;
      }
    | {
        _key: string;
        _type: 'testimonials';
        heading: Heading;
        testimonials: Array<{
          _id: string;
          _type: 'testimonial';
          _createdAt: string;
          _updatedAt: string;
          _rev: string;
          name: string;
          designation: string;
          company: string;
          image: {
            asset: {
              _id: string;
              _type: 'sanity.imageAsset';
              _createdAt: string;
              _updatedAt: string;
              _rev: string;
              originalFilename?: string;
              label?: string;
              title?: string;
              description?: string;
              altText?: string;
              sha1hash?: string;
              extension?: string;
              mimeType?: string;
              size?: number;
              assetId?: string;
              uploadId?: string;
              path?: string;
              url?: string;
              metadata?: SanityImageMetadata;
              source?: SanityAssetSourceData;
            } | null;
            hotspot?: SanityImageHotspot;
            crop?: SanityImageCrop;
            _type: 'image';
          };
          text: string;
        }>;
      }
    | {
        _key: string;
        _type: 'textSection';
        heading: Heading;
        richtext: Array<
          | ({
              _key: string;
            } & Callout)
          | ({
              _key: string;
            } & CustomCode)
          | {
              children?: Array<{
                marks?: Array<string>;
                text?: string;
                _type: 'span';
                _key: string;
              }>;
              style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'normal';
              listItem?: 'bullet' | 'number';
              markDefs?: Array<{
                href?: string;
                _type: 'link';
                _key: string;
              }>;
              level?: number;
              _type: 'block';
              _key: string;
            }
          | {
              asset?: {
                _ref: string;
                _type: 'reference';
                _weak?: boolean;
                [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
              };
              hotspot?: SanityImageHotspot;
              crop?: SanityImageCrop;
              _type: 'image';
              _key: string;
            }
        >;
      }
  >;
} | null;
// Variable: postPageQuery
// Query: *[_type == "post" && slug.current == $slug][0]{    _id,    title,    "slug": slug.current,    "ogImage": ogImage.asset->url,    showOg,    publishedAt,    excerpt,    body,    category-> {      name,      "slug": slug.current    },    tags[]->{      "slug": slug.current,      name    },    author->{      name,      twitter,      "image": image.asset->url,      "slug": slug.current    },    "plainText": pt::text(body),    "keywords": string::split(keywords, ","),    _updatedAt,       "headings": body[style in ["h1", "h2", "h3", "h4", "h5", "h6"]],        "relatedPosts": *[      _type == "post"      && _id != ^._id       && count(tags[@._ref in ^.^.tags[]._ref]) > 0    ][0..5]{      title,      "slug": slug.current,      "ogImage": ogImage.asset->url,      publishedAt,      "plainText": pt::text(body)    },    "recentPosts": *[      _type == "post"       && _id != ^._id      && !(_id in *[          _type == "post"          && _id != ^.^._id           && count(tags[@._ref in ^.^.^.tags[]._ref]) > 0        ]._id)      ] | order(publishedAt desc)[0..5]{      title,      "slug": slug.current,      "ogImage": ogImage.asset->url,      publishedAt,      "plainText": pt::text(body)    }  }
export type PostPageQueryResult = {
  _id: string;
  title: string;
  slug: string;
  ogImage: string | null;
  showOg: boolean | null;
  publishedAt: string;
  excerpt: string;
  body: Richtext;
  category: null;
  tags: Array<{
    slug: string;
    name: string;
  }>;
  author: {
    name: string;
    twitter: string;
    image: string | null;
    slug: string;
  };
  plainText: string;
  keywords: Array<string> | null;
  _updatedAt: string;
  headings: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: 'span';
      _key: string;
    }>;
    style?: 'blockquote' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'normal';
    listItem?: 'bullet' | 'number';
    markDefs?: Array<{
      href?: string;
      _type: 'link';
      _key: string;
    }>;
    level?: number;
    _type: 'block';
    _key: string;
  }>;
  relatedPosts: Array<{
    title: string;
    slug: string;
    ogImage: string | null;
    publishedAt: string;
    plainText: string;
  }>;
  recentPosts: Array<{
    title: string;
    slug: string;
    ogImage: string | null;
    publishedAt: string;
    plainText: string;
  }>;
} | null;
// Variable: blogPageQuery
// Query: *[_type == "post"][0..20] | order(publishedAt desc){    _id,    "slug": slug.current,    title,    "image": ogImage.asset->url,    excerpt,    "plainText": pt::text(body),    publishedAt  }
export type BlogPageQueryResult = Array<{
  _id: string;
  slug: string;
  title: string;
  image: string | null;
  excerpt: string;
  plainText: string;
  publishedAt: string;
}>;
// Variable: postsQuery
// Query: *[_type == "post"]{    title,     "slug": slug.current,     excerpt,    _updatedAt  }
export type PostsQueryResult = Array<{
  title: string;
  slug: string;
  excerpt: string;
  _updatedAt: string;
}>;

// Query TypeMap
import '@sanity/client';
declare module '@sanity/client' {
  interface SanityQueries {
    '\n *[_type == "page" && slug.current == $slug][0]{\n   ...,\n   content[] {\n      ...,\n     _type == "experience" => {\n      ...,\n      experience[]->\n     },\n     _type == "skills" => {\n      ...,\n      skills[] {\n        ...,\n        technologies[]{\n          ...,\n          "icon": icon.asset->url\n        }\n      }\n     },\n     _type == "projectBlock" => {\n        ...,\n        projects[]->{\n          ...,\n          image {\n            ...,\n            asset->\n          }\n        }\n     },\n     _type == "testimonials" => {\n        ...,\n        testimonials[]-> {\n          ...,\n          image {\n            ...,\n            asset->\n          }\n        }\n     }\n   }\n }\n': PageQueryResult;
    '\n  *[_type == "post" && slug.current == $slug][0]{\n    _id,\n    title,\n    "slug": slug.current,\n    "ogImage": ogImage.asset->url,\n    showOg,\n    publishedAt,\n    excerpt,\n    body,\n    category-> {\n      name,\n      "slug": slug.current\n    },\n    tags[]->{\n      "slug": slug.current,\n      name\n    },\n    author->{\n      name,\n      twitter,\n      "image": image.asset->url,\n      "slug": slug.current\n    },\n    "plainText": pt::text(body),\n    "keywords": string::split(keywords, ","),\n    _updatedAt,\n    \n   "headings": body[style in ["h1", "h2", "h3", "h4", "h5", "h6"]],\n    \n    "relatedPosts": *[\n      _type == "post"\n      && _id != ^._id \n      && count(tags[@._ref in ^.^.tags[]._ref]) > 0\n    ][0..5]{\n      title,\n      "slug": slug.current,\n      "ogImage": ogImage.asset->url,\n      publishedAt,\n      "plainText": pt::text(body)\n    },\n    "recentPosts": *[\n      _type == "post" \n      && _id != ^._id\n      && !(_id in *[\n          _type == "post"\n          && _id != ^.^._id \n          && count(tags[@._ref in ^.^.^.tags[]._ref]) > 0\n        ]._id)\n      ] | order(publishedAt desc)[0..5]{\n      title,\n      "slug": slug.current,\n      "ogImage": ogImage.asset->url,\n      publishedAt,\n      "plainText": pt::text(body)\n    }\n  }\n  ': PostPageQueryResult;
    '\n  *[_type == "post"][0..20] | order(publishedAt desc){\n    _id,\n    "slug": slug.current,\n    title,\n    "image": ogImage.asset->url,\n    excerpt,\n    "plainText": pt::text(body),\n    publishedAt\n  }\n': BlogPageQueryResult;
    '\n  *[_type == "post"]{\n    title, \n    "slug": slug.current, \n    excerpt,\n    _updatedAt\n  }\n': PostsQueryResult;
  }
}
