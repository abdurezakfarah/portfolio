{
  "$schema": "https://json.schemastore.org/eslintrc.json",
  "plugins": ["@typescript-eslint", "tailwindcss"],
  "parserOptions": {
    "project": "tsconfig.json"
  },
  "extends": [
    "next/core-web-vitals",
    "plugin:@typescript-eslint/recommended-type-checked",
    "plugin:@typescript-eslint/stylistic-type-checked",
    "prettier",
    "plugin:tailwindcss/recommended"
  ],
  "rules": {
    "@typescript-eslint/no-unsafe-return": "off",
    "@typescript-eslint/no-unsafe-member-access": "off",
    "@typescript-eslint/no-explicit-any": "off",
    "@typescript-eslint/no-unsafe-argument": "off",
    "@typescript-eslint/no-unsafe-call": "off",
    // these rules are too slow
    "@typescript-eslint/no-unsafe-assignment": "off",
    "@typescript-eslint/no-unused-vars": "off",

    // this doesn't make any sense
    "@typescript-eslint/prefer-nullish-coalescing": "off",

    // no
    "@typescript-eslint/consistent-type-definitions": "off",

    // why tho
    "@typescript-eslint/array-type": "off",

    // allow {} even though it's unsafe but comes handy
    "@typescript-eslint/ban-types": [
      "error",
      {
        "types": {
          "{}": false
        }
      }
    ],

    // we allow empty interfaces
    "no-empty-pattern": "off",
    "@typescript-eslint/no-empty-interface": "off",

    // we allow empty functions
    "@typescript-eslint/no-empty-function": "off",

    // we sometimes use async functions that don't await anything
    "@typescript-eslint/require-await": "off",

    // make sure to `await` inside tryâ€¦catch
    "@typescript-eslint/return-await": ["error", "in-try-catch"],

    "react/no-unescaped-entities": "off",

    // numbers and booleans are fine in template strings
    "@typescript-eslint/restrict-template-expressions": [
      "error",
      { "allowNumber": true, "allowBoolean": true }
    ],

    "@typescript-eslint/no-misused-promises": ["error", { "checksVoidReturn": false }],

    "no-restricted-imports": [
      "error",
      {
        "name": "next/router",
        "message": "Please use next/navigation instead."
      }
    ],
    "tailwindcss/no-custom-classname": "off",
    "tailwindcss/classnames-order": "error",
    "@next/next/no-html-link-for-pages": "off"
  },
  "settings": {
    "tailwindcss": {
      "callees": ["cn"],
      "config": "tailwind.config.ts"
    }
  },
  "overrides": [
    {
      "files": ["*.ts", "*.tsx"],
      "parser": "@typescript-eslint/parser"
    }
  ],
  "ignorePatterns": ["*.js", "*.jsx", "*.mjs", "src/script/**/*.ts", "node_modules"]
}
